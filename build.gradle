plugins {
	id 'fabric-loom' version '1.5-SNAPSHOT'
	id 'com.modrinth.minotaur' version '2.+'
}

version = project.mod_version + "-polymerport." + project.sub_version + "+" + project.minecraft_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	maven { url = 'https://maven.nucleoid.xyz' }
	maven { url = 'https://maven.wispforest.io' }
	maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
	maven { url = 'https://www.cursemaven.com' }
	maven {
		name = 'Modrinth'
		url = 'https://api.modrinth.com/maven'
		content {
			includeGroup 'maven.modrinth'
		}
	}
}

loom {
	accessWidenerPath = file("src/main/resources/fwaystones.accesswidener")

	mods {
		"fwaystones" {
			sourceSet("main")
		}
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modCompileOnly "maven.modrinth:repurposed-structures-fabric:${project.repurposed_structures_version}"

	modApi "maven.modrinth:pinlib:${project.pinlib_api_version}"
	modRuntimeOnly "maven.modrinth:pinlib:${project.pinlib_api_version}"

	annotationProcessor modImplementation("io.wispforest:owo-lib:${project.owo_version}")
	include "io.wispforest:owo-sentinel:${project.owo_version}"

	modImplementation include("eu.pb4:sgui:${project.sgui_version}")
	modImplementation include("eu.pb4:hologram-api:${project.hologram_api_version}")
	modImplementation include("eu.pb4:polymer-common:${project.polymer_version}")
	modImplementation include("eu.pb4:polymer-core:${project.polymer_version}")
	modImplementation include("eu.pb4:polymer-resource-pack:${project.polymer_version}")
	modImplementation include("eu.pb4:polymer-blocks:${project.polymer_version}")
	modImplementation include("xyz.nucleoid:server-translations-api:${project.server_translations_api_version}")
	modImplementation include("me.lucko:fabric-permissions-api:${project.fabric_permissions_api_version}")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 17
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}" }
	}
}

/*curseforge {
	if (System.getenv("CURSEFORGE")) {
		apiKey = System.getenv("CURSEFORGE")

		project {
			id = "572651"
			releaseType = "release"
			changelog = System.getenv("CHANGELOG")
			changelogType = "markdown"
			addGameVersion ((String) project.minecraft_version)
			addGameVersion "Fabric"
			mainArtifact(remapJar)

			afterEvaluate {
				uploadTask.dependsOn("remapJar")
			}
		}
	}

	options {
		forgeGradleIntegration = false
	}
}*/

if (System.getenv("MODRINTH")) {
	modrinth {
		token = System.getenv("MODRINTH")
		projectId = 'gU9Ao8K2'
		versionNumber = version
		versionType = "release"
		changelog = System.getenv("CHANGELOG")
		// On fabric, use 'remapJar' instead of 'jar'
		uploadFile = remapJar
		gameVersions = [((String) project.minecraft_version)]
		loaders = ["fabric", "quilt"]
	}

	remapJar {
		finalizedBy project.tasks.modrinth
	}
}
